#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <inttypes.h>

char* hexToBinaryString(uint8_t* value, size_t size) {
    char* binaryString = (char*)malloc(size * 8 + 1);

    if (binaryString == NULL) {
        perror("malloc");
        exit(EXIT_FAILURE);
    }

    binaryString[size * 8] = '\0';

    for (size_t i = 0; i < size; ++i) {
        for (int j = 7; j >= 0; --j) {
            binaryString[i * 8 + (7 - j)] = ((value[i] >> j) & 1) ? '1' : '0';
        }
    }

    return binaryString;
}

int findRightmostPatternPositionInBinaryString(const char* binaryString, const char* pattern) {
    char* position = strstr(binaryString, pattern);
    int rightmostPosition = -1;

    while (position != NULL) {
        // Calculate the bit position from the right
        rightmostPosition = position - binaryString;
        // Move to the next position
        position = strstr(position + 1, pattern);
    }

    return rightmostPosition;
}

int main() {
    // Array of uint8_t representing the hexadecimal value: 0xcaca5353
    uint8_t decodedValue3[4] = {0xca, 0xca, 0x53, 0x53};

    // Binary pattern to search for: 1010011
    const char* patternToFind = "1010011";

    // Convert the hexadecimal value to a binary string using sprintf
    char* binaryString = hexToBinaryString(decodedValue3, sizeof(decodedValue3));

    // Print the binary string for debugging
    printf("Binary String: %s\n", binaryString);

    // Find the position where the rightmost occurrence of the pattern starts
    int position = findRightmostPatternPositionInBinaryString(binaryString, patternToFind);

    if (position != -1) {
        printf("The pattern %s starts at the rightmost position %d in the binary representation\n", patternToFind, position);
    } else {
        printf("The pattern %s is not found in the binary representation\n", patternToFind);
    }

    // Free the allocated memory for the binary string
    free(binaryString);

    return 0;
}

